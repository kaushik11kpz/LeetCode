4. Bitwise NOT(~)/Bitwise Complement
-Output is inverse of Input

-To get the output of such large number, we must know how signed numbers are stored in JAVA
-In JAVA, Positive number are stored simply by doing decimal to binary conversion
-Ex - (+3) -> 00.......0011
-In JAVA, Negative number are stored in 2's complement form
-The first rule to identify positive or negative number in Binary form is by observing first bit
-If first bit is 0, number is positive
-If first bit is 1, number is negative

-2's complement representation
-If negative number is (-x) -> 2^32-x(2's complement representation)
-Convert 2^32-x from decimal to binary
-That is Binary representation of -x
-2^32-1 = 32 ones(111.....11)

-Examples , x=5 find ~x
->2's complement representation ---> 2^32-x
->2^32-1-5 = 2^32-6
-> x=-6

5. Leftshift Operator(<<)
-> x<<y
-> x - whose binary representation need to be shifted
-> y - The number of time we need to shift binary representation
-> Whatever, the resultant binary representation, we get the corresponding Integer value
-> For y=1,
   -Leading 1 bit is ignored, remaining 31 bit moves to left, 0 bit is added at the trailer
   Similarily, For y=30,
   -Leading 30 bit is ignored, remaining 2 bits moves to left, 30 0 bits are added at the trailer
-> Negative number may cime, if leading bit is 1(first) bit


->In general for small number, left shift operator works like multiplication with 2
->For x=3,
   -> x<<1 ---> x*2^1
   -> x<<2 ---> x*2*2 = x*2^2
   -> x<<3 ---> x*2*2*2 = x*2^3
   -> x<<4 ---> x*2*2*2*2 = x*2^4

-> For small numbers, it is not true