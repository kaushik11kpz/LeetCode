-Same concept as BFS.
-The only difference is, instead of storing the parent alongside node in a queue, we will use parent along with its node in the dfs call itself.
-If you want to continuously return true or false if some conditions are true, keep returning true everywhere.

TC-O(N+2E) + O(N)
SC-O(N)+O(N)
public class DetectCycleInUndirectedDFS {

	public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
		boolean visited[] = new boolean[V];
		for(int i=0;i<V;i++) {
			if(visited[i] == false) {
				if(checkForCycle(i,-1,visited,adj) == true) {
					return true;
				}
			}
		}
		return false;
	}
	private boolean checkForCycle(int src, int parent, boolean visited[], ArrayList<ArrayList<Integer>> adj) {
		visited[src]=true;
		for(int nei : adj.get(src)) {
			if(visited[nei] == false) {
				if(checkForCycle(nei,src,visited,adj) == true) {
					return true;
				}
			}else if(parent != nei) {
				return true;
			}
		}
		return false;
	}
}
