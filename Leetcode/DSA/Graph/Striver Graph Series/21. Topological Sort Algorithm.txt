-Topological Sorting(DFS)
1. Only exists in DAG.
2. Linear ordering of vertices such that if there is an edge between u and v, u always appears before v in that ordering.

-Solution
-Solve it using dfs.
-Create a visited array and stack.
-visited[] is used to check whether a particular node has been visited earlier or not.
-Stack is used to store those node whose dfs is completed. This leads to automatic arrangement of nodes in topo order inside stack.
-Inside the topoSort method, declare an array of size of total nodes and tarverse on stack while stack is not empty and keep storing
elements in result[] array, return that result.

Code
TC-O(V+E)
SC-O(V+E)

	public int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
		int visited[] = new int[V];
		//once dfs of a particular node is done, that node is stored in the stack.
		Stack<Integer> st = new Stack<>();
		for(int i=0;i<V;i++) {
			if(visited[i] == 0) {
				dfs(i,visited,st,adj);
			}
		}
		int res[] = new int[V];
		int i=0;
		while(!st.isEmpty()) {
			res[i++]=st.pop();
		}
		return res;
	}
	private void dfs(int node, int visited[], Stack<Integer> st, ArrayList<ArrayList<Integer>> adj) {
		visited[node]=1;
		for(int nei : adj.get(node)){
			if(visited[nei] == 0) {
				dfs(nei,visited,st,adj);
			}
		}
		//here dfs of node is completed, add it to stack
		st.add(node);
	}

