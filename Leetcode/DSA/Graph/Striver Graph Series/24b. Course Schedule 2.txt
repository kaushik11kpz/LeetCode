Course Schedule 2
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

--Observation
-Use Topologcal Sort with BFS/Kahn's Algorithm

Code
TC-O(V+E)
SC-O(V)

public int[] findOrder(int numCourses, int[][] prerequisites) {
        //Topological Sort BFS | Kahn's Algorithm
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int pre[] : prerequisites){
            adj.get(pre[1]).add(pre[0]);
        }
        int indegree[] = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(int nei : adj.get(i)){
                indegree[nei]++;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                queue.add(i);
                System.out.println(i);
            }
        }
        ArrayList<Integer> res = new ArrayList<>();
        int count=0;
        while(!queue.isEmpty()){
            int node = queue.poll();
            res.add(node);
            count++;
            for(int nei : adj.get(node)){
                indegree[nei]--;
                if(indegree[nei] == 0){
                    queue.add(nei);
                }
            }
        }
        if(count != numCourses){
            return new int[] {};
        }
        int arr[] = new int[res.size()];
        for(int i=0;i<res.size();i++){
            arr[i]=res.get(i);
        }
        return arr;
    }