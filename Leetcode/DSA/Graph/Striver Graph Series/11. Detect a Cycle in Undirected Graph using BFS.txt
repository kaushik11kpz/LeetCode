-While performing a BFS on a graph to detect a cycle, inside queue add parent along with the node.
-Now when traversing using BFS, if you encounter a node which is already visited and is not a parent of current node. This verifies that the graph have a cycle inside it.


TC- O(N+2E)
SC- O(N)
public class DetectCycleInUndirectedBFS {

	public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
		boolean visited[] = new boolean[V];
		for(int i=0;i<V;i++) {
			if(!visited[i]) {
				if(checkForCycle(i,V,visited,adj)) {
					return true;
				}
			}
		}
		return false;
	}
	public boolean checkForCycle(int src, int V, boolean visited[], ArrayList<ArrayList<Integer>> adj) {
		visited[src]=true;
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int[] {src,-1});
		while(!queue.isEmpty()) {
			int[] temp = queue.peek();
			int node = temp[0];
			int parent = temp[1];
			queue.remove();
			for(int nei : adj.get(node)) {
				if(visited[nei] == false) {
					queue.add(new int[] {nei, node});
					visited[nei] = true;
				}else if(parent != nei) {
					return true;
				}
			}
		}
		return false;
	}
}
