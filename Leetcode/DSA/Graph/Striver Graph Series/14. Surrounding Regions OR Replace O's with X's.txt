Question-Convert all O's which are surrounded on all 4 directions with X to X.
Solution-
1. Observation - If a set of O's are connected to a boundary, they cannot be converted to X.
-Start from the boundaries O's and mark them that they will not be converted.
-Then convert the remaining O's.
--Code

TC- O(N*M)
SC- O(N*M)
public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;
        int visited[][] = new int[m][n];
        int delRow[] = {-1,0,1,0};
        int delCol[] = {0,1,0,-1};

        for(int i=0;i<m;i++){
            //first row
            if(visited[i][0] == 0 && board[i][0] == 'O'){
                dfs(i,0,visited,board,delRow,delCol);
            }
            //last row
            if(visited[i][n-1] == 0 && board[i][n-1] == 'O'){
                dfs(i,n-1,visited,board,delRow,delCol);
            }
        }

        for(int j=0;j<n;j++){
            //first column
            if(visited[0][j] == 0 && board[0][j] == 'O'){
                dfs(0,j,visited,board,delRow,delCol);
            }
            //last column
            if(visited[m-1][j] == 0 && board[m-1][j] == 'O'){
                dfs(m-1,j,visited,board,delRow,delCol);
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(visited[i][j] == 0 && board[i][j] == 'O'){
                    board[i][j]='X';
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                System.out.print(visited[i][j]+" ");
            }
            System.out.println();
        }
    }
    public void dfs(int row, int col, int visited[][], char board[][], int delRow[], int delCol[]){
        visited[row][col]=1;
        int m=board.length;
        int n=board[0].length;
        for(int i=0;i<4;i++){
            int newRow = row + delRow[i];
            int newCol = col + delCol[i];
            if(newRow>=0 && newRow<m && newCol>=0 && newCol<n && visited[newRow][newCol] == 0 && board[newRow][newCol] == 'O'){
                dfs(newRow,newCol,visited,board,delRow,delCol);
            }
        }
    }