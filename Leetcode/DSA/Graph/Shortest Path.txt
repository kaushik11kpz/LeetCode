Standard Shortest Path Algorithms
1. Bellman-Ford - O(VE)
2. Dijkstra's Algorithm - O(ElogV) Faster than bellman-ford
To find shortest path in weighted DAG in O(V+E)
We can use,
3. Topological Sorting- O(V+E)



Shortest Path in Unweighted for both directed and undirected Graph - BFS

static void BFS(ArrayList<ArrayList<Integer>> adj,int V,int s, int[] dist) 
	{ 
		boolean[] visited=new boolean[V]; 
    	for(int i = 0; i < V; i++) 
    		visited[i] = false; 
    
    	Queue<Integer> q=new LinkedList<>();
    	
    	visited[s] = true; 
    	q.add(s); 
        dist[s]=0;
    
    	while(q.isEmpty()==false) 
    	{ 
    		int u = q.poll();  
    		 
    		for(int v:adj.get(u)){
    		    if(visited[v]==false){
    		        dist[v]=dist[u]+1;
    		        visited[v]=true;
    		        q.add(v);
    		    }
    		} 
    	} 
	} 


-----Shortest Path in Weighted Directed Acyclic Graph(DAG) - Using Topological Sorting - O(V+E)
-> After finding topological sort of the graph, iterate over every element of topological sort and for each adjacent element to each topological sort element use standard relax operation.
 Algorithm/Code-
  void topologicalSortUtil(int v, Boolean visited[], Stack stack)
    {

        visited[v] = true;
        Integer i;

        Iterator<AdjListNode> it = adj[v].iterator();
        while (it.hasNext())
        {
            AdjListNode node =it.next();
            if (!visited[node.getV()])
                topologicalSortUtil(node.getV(), visited, stack);
        }

        stack.add(v);
    }

    void shortestPath(int s)
    {
        Stack stack = new Stack();
        int dist[] = new int[V];

        Boolean visited[] = new Boolean[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;

        for (int i = 0; i < V; i++)
            if (visited[i] == false)
                topologicalSortUtil(i, visited, stack);

        for (int i = 0; i < V; i++)
            dist[i] = Integer.MAX_VALUE;
        dist[s] = 0;

        while (stack.empty() == false)
        {
            int u = (int)stack.pop();

            Iterator<AdjListNode> it;
            if (dist[u] != Integer.MAX_VALUE)
            {
                it = adj[u].iterator();
                while (it.hasNext())
                {
                    AdjListNode i= it.next();
                    if (dist[i.getV()] > dist[u] + i.getWeight())
                        dist[i.getV()] = dist[u] + i.getWeight();
                }
            }
        }

        for (int i = 0; i < V; i++)
        {
            if (dist[i] == Integer.MAX_VALUE)
                System.out.print( "INF ");
            else
                System.out.print( dist[i] + " ");
        }
    }